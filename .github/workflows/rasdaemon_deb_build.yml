name: build-deb-and-autopkgtest

on:
  push:
  pull_request:
  schedule:
    # run on every Sunday 4:00 UTC+2
    - cron: "0 3 * * 0"

env:
  # in 2024 Aug, Github Action provides 4 cores / 16G memory / 19G disk
  # see "default github action resource" below
  RELEASE: "sid"
  CPU: "2"
  MEMORY: "8GB"
  DISK: "16GB"
  USERNAME_IN_LXC: "tai"

jobs:
  VERIFICATION_01_LOCAL_ENV_Build_Deb_in_LXD_VM:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Variables
        uses: ./.github/workflows/01_set_variables

      - name: Launch VM Instance and Build Deb
        uses: ./.github/workflows/02_launch_vm_instance

      - name: Get Ready to Setup Testbed
        run: |
          # begin to setup autopkgtest
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c "sudo apt update"
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c "sudo apt install -y autopkgtest"

      - name: Setup Testbed - Autopkgtest Local Env
        run: |
          echo "We will run autopkgtest in the local environment directly so no additional setup is needed."

      - name: Run Test - Autopkgtest Local Env
        run: |
          # start testing with autopkgtest
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c "${HOME_IN_LXC}/${REPO_NAME}/debian/tools/04-run-autopkgtest-local.sh"

      - name: Functional Testing
        run: |
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c 'echo ${HOME}/workspace-rasdaemon-deb/'
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c 'ls ${HOME}/workspace-rasdaemon-deb/'
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c 'sudo apt install -y --allow-downgrades ${HOME}/workspace-rasdaemon-deb/rasdaemon_*_amd64.deb'

          lxc exec ${VM} -- bash -c 'echo "deb-src http://deb.debian.org/debian/ sid main" | tee -a /etc/apt/sources.list'
          lxc exec ${VM} -- bash -c 'apt update; apt install -y git make kmod dpkg-dev linux-headers-amd64'
          lxc exec ${VM} -- ${HOME_IN_LXC}/${REPO_NAME}/debian/tools/build-run-fake-edac-ko-sid-02-build-run.sh
          # still WIP
          #lxc exec ${VM} -- ${HOME_IN_LXC}/toolbox/scripts/packaging-deb-rasdaemon/run-test_02-inject-fake-events.sh
          lxc exec ${VM} -- ras-mc-ctl --summary
          lxc exec ${VM} -- ras-mc-ctl --errors
          lxc exec ${VM} -- ras-mc-ctl --status
          lxc exec ${VM} -- systemctl is-active --quiet rasdaemon
          lxc exec ${VM} -- ${HOME_IN_LXC}/${REPO_NAME}/debian/tools/run-test_01-show-general-info.sh
          # single quote matters to ensure the cat command is interpretered at the right stage.
          lxc exec ${VM} -- bash -c 'echo mc_name is: $(sudo cat /sys/devices/system/edac/mc/mc0/mc_name)'

      #- name: Setup Testbed - Bare Metal and Linux Kernel with Debugfs Enabled
      #  run: |
      #    lxc exec ${VM} -- apt install wireless-regdb
      #    lxc exec ${VM} -- wget https://people.canonical.com/~taihsiang/rasdaemon-amd64/linux-debugfs-enabled/linux-image-unsigned-5.15.0-27-generic_5.15.0-27.28~d20220513t004517~ab2e786e8b1e_amd64.deb
      #    lxc exec ${VM} -- wget https://people.canonical.com/~taihsiang/rasdaemon-amd64/linux-debugfs-enabled/linux-modules-5.15.0-27-generic_5.15.0-27.28~d20220513t004517~ab2e786e8b1e_amd64.deb
      #    lxc exec ${VM} -- wget https://people.canonical.com/~taihsiang/rasdaemon-amd64/linux-debugfs-enabled/linux-modules-extra-5.15.0-27-generic_5.15.0-27.28~d20220513t004517~ab2e786e8b1e_amd64.deb
      #    lxc exec ${VM} -- dpkg -i linux-image-unsigned-5.15.0-27-generic_5.15.0-27.28~d20220513t004517~ab2e786e8b1e_amd64.deb linux-modules-5.15.0-27-generic_5.15.0-27.28~d20220513t004517~ab2e786e8b1e_amd64.deb linux-modules-extra-5.15.0-27-generic_5.15.0-27.28~d20220513t004517~ab2e786e8b1e_amd64.deb
      #    lxc exec ${VM} -- uname -a

      #    lxc exec ${VM} -- bash -c "awk -F\' '/menuentry / {print $2}' /boot/grub/grub.cfg"
      #    lxc exec ${VM} -- bash -c "grub-reboot '1>2'"

      #    # make the new kernel take effect
      #    echo "rebooting vm..."
      #    lxc exec ${VM} -- reboot
      #    sleep 60
      #    echo "rebooted vm."

      #    #lxc exec ${VM} -- sudo modprobe i7core_edac
      #    #lxc exec ${VM} -- sudo modprobe amd64_edac_mod
      #    #lxc exec ${VM} -- sudo modprobe i82801ca_edac

      #    lxc exec ${VM} -- bash -c "sudo dmesg | grep -i EDAC"
      #    # just dump debugging info. do not stop if nothing is found
      #    lxc exec ${VM} -- bash -c "lsmod | grep -i EDAC; true"
      #    lxc exec ${VM} -- ls /sys/devices/system/edac/mc
      #    # at this moment, I do not expect there is such fs enabled
      #    lxc exec ${VM} -- bash -c "ls /sys/kernel/debug/edac/; true"
      #    lxc exec ${VM} -- uname -a

  VERIFICATION_02_LXC_Build_Deb_in_LXD_VM:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Variables
        uses: ./.github/workflows/01_set_variables

      - name: Launch VM Instance and Build Deb
        uses: ./.github/workflows/02_launch_vm_instance

      - name: Get Ready to Setup Testbed with LXD Tools
        run: |
          # begin to setup autopkgtest
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c "sudo apt update"
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c "sudo apt install -y autopkgtest snapd"
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c "sudo snap install lxd --channel=latest/stable"

          # make sure USER can run lxd lxc without sudo
          lxc exec ${VM} -- snap services lxd
          # snap service prefix is snap.
          lxc exec ${VM} -- systemctl start snap.lxd.activate
          lxc exec ${VM} -- systemctl start snap.lxd.daemon
          lxc exec ${VM} -- systemctl start snap.lxd.user-daemon
          lxc exec ${VM} -- snap services lxd
          # hmmm this trick works rather than systemctl start
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c "sudo usermod -a -G lxd ${USERNAME_IN_LXC}"
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c "newgrp lxd"

          echo "checking /dev/kvm read/write permission..."
          lxc exec ${VM} -- apt update
          lxc exec ${VM} -- apt install -y cpu-checker
          lxc exec ${VM} -- kvm-ok
          lxc exec ${VM} -- adduser ${USERNAME_IN_LXC} kvm
          lxc exec ${VM} -- kvm-ok
          echo "checking /dev/kvm read/write permission... done!"

          # make sure USER can know the /snap/bin/lxd path
          # make sure USER can have lxd group permission
          echo "rebooting vm..."
          lxc exec ${VM} -- reboot
          sleep 30
          echo "rebooted vm."

          # get lxd-managed lxc command ready to use
          lxc exec ${VM} -- lxd init --auto

      - name: Setup Testbed - Autopkgtest LXD
        run: |
          # begin to build lxc testbed via lxd
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c "echo 'building autopkgtest-build-lxd image...'"
          # dependency required since 2024 Aug 13
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c "sudo apt update; sudo apt install -y dnsmasq"
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c "autopkgtest-build-lxd images:debian/sid/amd64"

      - name: Run Test - Autopkgtest LXD
        # for rasdaemon
        # 1. vm as testbed is expected
        # 2. using autopkgtest in lxd-managed lxc will get return code 2
        #
        # man autopkgtest
        # 2    at least one test was skipped (or at least one flaky test failed)
        continue-on-error: true
        run: |
          # start testing with autopkgtest
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c "${HOME_IN_LXC}/${REPO_NAME}/debian/tools/04-run-autopkgtest-lxd.sh"

          echo
          echo "=================================================================================================================="
          echo "rasdaemon autopkgtest expects isolation-machine. That's to say, lxd based autopkgtest will fail for return code 2:"
          echo "man autopkgtest: 2    at least one test was skipped (or at least one flaky test failed)"
          echo
          echo "Dont worry if this step fail for error code 2"
          echo "=================================================================================================================="
          echo

  VERIFICATION_03_QEMU_Build_Deb_in_LXD_VM:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Variables
        uses: ./.github/workflows/01_set_variables

      - name: Launch VM Instance and Build Deb
        uses: ./.github/workflows/02_launch_vm_instance

      - name: Get Ready to Setup Testbed with QEMU Tools
        run: |
          # begin to setup autopkgtest
          lxc exec ${VM} -- apt update
          lxc exec ${VM} -- apt install -y autopkgtest qemu-system-x86 vmdb2 cpu-checker

          echo "checking /dev/kvm read/write permission..."
          lxc exec ${VM} -- kvm-ok
          lxc exec ${VM} -- adduser ${USERNAME_IN_LXC} kvm
          lxc exec ${VM} -- kvm-ok
          echo "checking /dev/kvm read/write permission... done!"

          # make sure USER can know the /snap/bin/lxd path
          # make sure USER can have lxd group permission
          echo "rebooting vm..."
          lxc exec ${VM} -- reboot
          sleep 30
          echo "rebooted vm."

      - name: Setup Testbed - Autopkgtest QEMU
        run: |
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c "${HOME_IN_LXC}/${REPO_NAME}/debian/tools/03-get-ready-to-use-autopkgtest-qemu-lxd-01-setup-qemu-image.sh"

      - name: Run Test - Autopkgtest QEMU
        # rasdaemon autopkgtest has a known issue with QEMU based test.
        # See Bug#1071456 https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1071456
        # at this moment let us just ignore the failure until the kernel is updated.
        continue-on-error: true
        run: |
          lxc exec ${VM} -- su --login ${USERNAME_IN_LXC} -c "${HOME_IN_LXC}/${REPO_NAME}/debian/tools/04-run-autopkgtest-qemu.sh"

          echo
          echo "=================================================================================================================="
          echo "rasdaemon autopkgtest has a known issue with QEMU based test."
          echo "See Bug#1071456 https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1071456"
          echo "  - autopkgtest workaround released: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1071456"
          echo "  - corresponding kernel issue reported to Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1072004"
          echo "  - corresponding kernel issue reported to Launchpad / Ubuntu: https://bugs.launchpad.net/ubuntu/+source/autopkgtest/+bug/2056461"
          echo "  - corresponding kernel issue reported to Linux: https://bugzilla.kernel.org/show_bug.cgi?id=218916"
          echo
          echo "Dont worry if this step fail for timeout raised by 6.8 kernel in the QEMU VM instance."
          echo "=================================================================================================================="
          echo

